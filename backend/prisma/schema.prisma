// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QR {
  id              String           @id @default(cuid())
  vehicle_id      String?          @unique
  Vehicle         Vehicle?         @relation(fields: [vehicle_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  ContactAttempts ContactAttempt[]
}

model Vehicle {
  id               String           @id @default(cuid())
  name             String?
  registration_num String?
  owner_cust_id    String
  OwnerCustomer    Customer         @relation(fields: [owner_cust_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  QR               QR?
  ContactAttempts  ContactAttempt[]
}

model User {
  id                String    @id @default(cuid())
  name              String?
  phone             String?   @unique
  is_phone_verified Boolean   @default(false)
  password          String?
  login_otp         String?   @db.VarChar(10)
  login_otp_expiry  DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  Customer          Customer?
}

model Customer {
  id         String    @id @default(cuid())
  user_id    String    @unique
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Vehicles   Vehicle[]
  Devices    Device[]
}

model ContactAttempt {
  id                String   @id @default(cuid())
  vehicle_id        String
  Vehicle           Vehicle  @relation(fields: [vehicle_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  qr_id             String
  QR                QR       @relation(fields: [qr_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reason            String   @db.VarChar(20)
  fcmId             String?
  latest_error_code String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Device {
  id          String     @id @default(cuid())
  token       String
  type        DeviceType @default(android)
  customer_id String
  Customer    Customer   @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@unique([token, customer_id, type])
}

enum DeviceType {
  android
  ios
  web
  windows
  macos
}

enum ExpoTicketStatus {
  ok
  error
}
